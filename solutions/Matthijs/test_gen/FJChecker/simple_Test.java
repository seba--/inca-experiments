package FJChecker;

/*Generated by MPS */

import jetbrains.mps.MPSLaunch;
import jetbrains.mps.lang.test.runtime.BaseTransformationTest;
import org.junit.ClassRule;
import jetbrains.mps.lang.test.runtime.TestParametersCache;
import org.junit.Test;
import jetbrains.mps.lang.test.runtime.BaseTestBody;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.module.SRepository;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPointerOperations;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;

@MPSLaunch
public class simple_Test extends BaseTransformationTest {
  @ClassRule
  public static final TestParametersCache ourParamCache = new TestParametersCache(simple_Test.class, "", "r:31e0e4b9-2493-421d-9709-3871fff42f66(FJChecker@tests)", false);


  public simple_Test() {
    super(ourParamCache);
  }

  @Test
  public void test_minimalMethod() throws Throwable {
    runTest("FJChecker.simple_Test$TestBody", "test_minimalMethod", true);
  }

  @MPSLaunch
  public static class TestBody extends BaseTestBody {
    public void test_minimalMethod() throws Exception {
      addNodeById("7077156366783206228");
      final SModel instanceModel = SNodeOperations.getModel(SNodeOperations.cast(getNodeById("7077156366783206230"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0x2d284cd24f9b4f47L, 0xbeeca8bf99adcb74L, "FeatherweightJava"), 0x2d146087978628e5L, "Module"))));
      final SRepository repository = instanceModel.getRepository();
      final SModel analysisModel = SPointerOperations.resolveModel(PersistenceFacade.getInstance().createModelReference("r:b870436a-bd35-44b7-828c-916a0790dd66(FJChecker)"), repository);

      try {
        repository.getModelAccess().runReadAction(new Runnable() {
          public void run() {
            System.out.println(AnalysisResultAccess.getMinimalMethods(SNodeOperations.cast(getNodeById("7077156366784713258"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0x2d284cd24f9b4f47L, 0xbeeca8bf99adcb74L, "FeatherweightJava"), 0x2d1460879780fcceL, "MethodCall"))), instanceModel));
          }
        });
      } finally {
      }
    }


  }
}
