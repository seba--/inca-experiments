package PCF.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_App;
  private ConceptPresentation props_Exp;
  private ConceptPresentation props_Lambda;
  private ConceptPresentation props_Toplevel;
  private ConceptPresentation props_Var;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.App:
        if (props_App == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("App");
          props_App = cpb.create();
        }
        return props_App;
      case LanguageConceptSwitch.Exp:
        if (props_Exp == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Exp = cpb.create();
        }
        return props_Exp;
      case LanguageConceptSwitch.Lambda:
        if (props_Lambda == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Lambda = cpb.create();
        }
        return props_Lambda;
      case LanguageConceptSwitch.Toplevel:
        if (props_Toplevel == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Toplevel");
          props_Toplevel = cpb.create();
        }
        return props_Toplevel;
      case LanguageConceptSwitch.Var:
        if (props_Var == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Var = cpb.create();
        }
        return props_Var;
    }
    return null;
  }
}
