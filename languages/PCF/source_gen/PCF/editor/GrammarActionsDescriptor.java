package PCF.editor;

/*Generated by MPS */

import com.mbeddr.mpsutil.grammarcells.runtime.AbstractGrammarActionDescriptor;
import com.mbeddr.mpsutil.grammarcells.runtime.IGrammarActionsDescriptor;
import java.util.List;
import jetbrains.mps.openapi.editor.menus.substitute.SubstituteMenuItem;
import jetbrains.mps.openapi.editor.menus.substitute.SubstituteMenuContext;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import com.mbeddr.mpsutil.grammarcells.runtime.GrammarCellsUtil;
import org.jetbrains.mps.openapi.language.SConcept;
import com.mbeddr.mpsutil.grammarcells.runtime.menu.GrammarCellsSubstituteMenuItem;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.openapi.editor.menus.transformation.TransformationMenuItem;
import jetbrains.mps.openapi.editor.menus.transformation.TransformationMenuContext;
import jetbrains.mps.lang.editor.menus.transformation.MenuLocations;
import jetbrains.mps.openapi.editor.cells.SubstituteAction;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.action.NodeSubstituteActionsFactoryContext;
import com.mbeddr.mpsutil.grammarcells.runtime.IToken;
import com.mbeddr.mpsutil.grammarcells.runtime.IRule;
import org.jetbrains.mps.openapi.model.SModel;
import java.util.Set;
import org.jetbrains.mps.openapi.language.SLanguage;

public class GrammarActionsDescriptor extends AbstractGrammarActionDescriptor implements IGrammarActionsDescriptor {

  public static final GrammarActionsDescriptor INSTANCE = new GrammarActionsDescriptor();

  @Override
  public List<SubstituteMenuItem> getActions(final SubstituteMenuContext _context, final SAbstractConcept expectedOutputConceptExactly) {
    final List<SubstituteMenuItem> result = ListSequence.fromList(new ArrayList<SubstituteMenuItem>());

    ListSequence.fromList(result).addSequence(Sequence.fromIterable(new Object() {
      public Iterable<SubstituteMenuItem> query() {
        List<SubstituteMenuItem> result = ListSequence.fromList(new ArrayList<SubstituteMenuItem>());
        if (SConceptOperations.isExactly(SNodeOperations.asSConcept(expectedOutputConceptExactly), MetaAdapterFactory.getConcept(0xac86cc34da041ceL, 0xbbbd42f64ff2e3efL, 0x1ca1eb7c5f5859edL, "PCF.structure.Var"))) {
          final SAbstractConcept expectedOutputConcept = GrammarCellsUtil.getExpectedOutputConcept(_context, expectedOutputConceptExactly);

          for (SConcept subconcept : ListSequence.fromList(GrammarCellsUtil.getVisibleSubconceptsNonAbstract(MetaAdapterFactory.getConcept(0xac86cc34da041ceL, 0xbbbd42f64ff2e3efL, 0x1ca1eb7c5f5859edL, "PCF.structure.Var"), _context.getModel(), Var_Editor.class))) {
            final SConcept outputConcept = ((SConcept) subconcept);

            if (SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(outputConcept), SNodeOperations.asSConcept(expectedOutputConcept))) {
              boolean isApplicable = GrammarCellsUtil.canBeChild(outputConcept, _context);
              if (isApplicable) {
                ListSequence.fromList(result).addElement(new GrammarCellsSubstituteMenuItem(_context) {
                  private SProperty myProperty = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");

                  public String getMatchingText(String pattern) {
                    return pattern;
                  }
                  @Override
                  public boolean canExecute(@NotNull String pattern) {
                    if ((pattern == null || pattern.length() == 0)) {
                      return false;
                    }
                    return GrammarCellsUtil.isValidPropertyValue(myProperty, expectedOutputConceptExactly, pattern);
                  }
                  @Override
                  public boolean canExecuteStrictly(@NotNull String pattern) {
                    return canExecute(pattern);
                  }

                  @Override
                  public SNode createNode(@NotNull String pattern) {
                    SNode newNode = SNodeFactoryOperations.createNewNode(SNodeFactoryOperations.asInstanceConcept(expectedOutputConceptExactly), null);
                    SPropertyOperations.set(newNode, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), GrammarCellsUtil.toInternalPropertyValue(myProperty, pattern));
                    return newNode;
                  }


                  @Override
                  public void select(@NotNull SNode newNode, @NotNull String pattern) {
                    super.select(newNode, pattern);
                  }

                  @Override
                  public SAbstractConcept getOutputConcept() {
                    return MetaAdapterFactory.getConcept(0xac86cc34da041ceL, 0xbbbd42f64ff2e3efL, 0x1ca1eb7c5f5859edL, "PCF.structure.Var");
                  }
                });
              }
            }

          }
        }
        return ListSequence.fromList(result).where(new IWhereFilter<SubstituteMenuItem>() {
          public boolean accept(SubstituteMenuItem it) {
            return it != null;
          }
        }).toListSequence();
      }
    }.query()));


    return ListSequence.fromList(result).where(new IWhereFilter<SubstituteMenuItem>() {
      public boolean accept(SubstituteMenuItem it) {
        return it != null;
      }
    }).toListSequence();
  }

  @Override
  protected List<TransformationMenuItem> doGetSideTransformActions(final TransformationMenuContext _context) {
    final List<TransformationMenuItem> result = ListSequence.fromList(new ArrayList<TransformationMenuItem>());

    {
      boolean sideEnabled = false;
      sideEnabled |= _context.getMenuLocation() == MenuLocations.LEFT_SIDE_TRANSFORM;
      sideEnabled |= _context.getMenuLocation() == MenuLocations.RIGHT_SIDE_TRANSFORM;
      if (sideEnabled) {
        ListSequence.fromList(result).addSequence(Sequence.fromIterable(new Object() {
          public Iterable<TransformationMenuItem> query(final TransformationMenuContext _context) {
            List<TransformationMenuItem> result = ListSequence.fromList(new ArrayList<TransformationMenuItem>());
            return ListSequence.fromList(result).where(new IWhereFilter<TransformationMenuItem>() {
              public boolean accept(TransformationMenuItem it) {
                return it != null;
              }
            }).toListSequence();
          }
        }.query(_context)));
      }
    }

    return ListSequence.fromList(result).where(new IWhereFilter<TransformationMenuItem>() {
      public boolean accept(TransformationMenuItem it) {
        return it != null;
      }
    }).toListSequence();
  }

  @Override
  public List<SubstituteAction> getConstantReplaceActions(final IOperationContext operationContext, final NodeSubstituteActionsFactoryContext _context, final List<IToken> elementsBefore, final List<IToken> elementsAfter) {
    final List<SubstituteAction> result = ListSequence.fromList(new ArrayList<SubstituteAction>());


    return ListSequence.fromList(result).where(new IWhereFilter<SubstituteAction>() {
      public boolean accept(SubstituteAction it) {
        return it != null;
      }
    }).toListSequence();
  }

  @Override
  public List<IRule> getRules(final SModel contextModel) {
    final List<IRule> rules = ListSequence.fromList(new ArrayList<IRule>());

    final Set<SLanguage> visibleLanguages = GrammarCellsUtil.getVisibleLanguages(contextModel);


    return rules;
  }
}
